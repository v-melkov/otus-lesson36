---
- hosts:                  all
  become:                 yes
  tasks:
  # установка софта
  - name:                 Install Percona yum repository
    yum:                  name=https://repo.percona.com/yum/percona-release-latest.noarch.rpm state=present
  - name:                 Install Percona server
    yum:                  name=Percona-Server-server-57 state=present
  - name:                 Install MySQL-python
    yum:                  name=MySQL-python state=present
  # копируем конфиги на машины и стартуем mysqld
  - name:                 Copy configuration files
    copy:                 src=files/ dest=/etc/my.cnf.d/
  - name:                 Start mysqld
    service:              name=mysqld state=started enabled=yes

  # решение со сменой временного пароля через ansible
  - name:                 Detect and properly set root password
    stat:                 path=/root/.my.cnf
    register:             r
  - name:                 Get root temporary password
    shell:                "cat /var/log/mysqld.log | grep 'root@localhost:' | awk '{print $11}'"
    register:             tmp_root_pass
    when:                 r.stat.exists==False
  - name:                 Set new password from temporary password
    shell:                'mysql -e "SET PASSWORD = PASSWORD(''My1StrongP@ssword'');" --connect-expired-password -uroot -p"{{ tmp_root_pass.stdout }}"'
    when:                 r.stat.exists==False
  - name:                 Copy my.cnf
    copy:                 src=my.cnf dest=/root/.my.cnf force=yes
  # ----------

  # создадим пользователей для репликации и для обычной работы
  - name:                 Create replication account
    mysql_user:           name=repl host="%" password='!OtusLinux2020' priv='*.*:REPLICATION SLAVE' state=present
  - name:                 Create ordinary account
    mysql_user:           name=user host="%" password='!OtusLinux2020' priv='*.*:SELECT,INSERT,UPDATE,DELETE,CREATE,DROP' state=present

# MASTER
- hosts:                  master
  become:                 yes
  tasks:
  # поменяем server-id
  - name:                 Modify server-id
    lineinfile:           path=/etc/my.cnf.d/01-base.cnf regexp="^server-id=0" line="server-id=1"
  - name:                 Restart mysqld
    service:              name=mysqld state=restarted
  # копируем и восстанавливаем дамп
  - name:                 Copy database dump file
    copy:                 src=bet.dmp dest=/tmp/
  - name:                 Restore database # команда не идемпотентна! нужны доп проверки
    mysql_db:             name=bet state=import target=/tmp/bet.dmp
  # перед экспортом сбросим бинлог
  - name:                 Reset master binlog
    command:              /usr/bin/mysql -u root -e "RESET MASTER"
  # экспорт базы без двух табличек
  - name:                 Dump database for replication
    mysql_db:
      state:              dump
      name:               all
      ignore_tables:
        - bet.events_on_demand
        - bet.v_same_event
      target:             /tmp/replication.sql
      single_transaction: yes
  # воспользуемся хостовой машиной для переброса дампа базы (лень настраивать ssh между машинами)
  - name:                 Copy dump to host
    fetch:                src=/tmp/replication.sql dest=replication.sql flat=yes

 # SLAVE
- hosts:                  slave
  become:                 yes
  tasks:
  # поменяем server-id
  - name:                 Modify server-id
    lineinfile:           path=/etc/my.cnf.d/01-base.cnf regexp="^server-id=0" line="server-id=2"
  # отредактируем настройки репликации
  - name:                 Configure binlog.cnf
    lineinfile:           path=/etc/my.cnf.d/05-binlog.cnf regexp="{{ item.regexp }}" line='\1' backrefs=yes
    with_items:
      - { regexp:         '^#(replicate-ignore-table=bet.events_on_demand)' }
      - { regexp:         '^#(replicate-ignore-table=bet.v_same_event)' }
  - name:                 Restart mysqld
    service:              name=mysqld state=restarted
  # копируем дамп на машину
  - name:                 Copy dump from host
    copy:                 src=replication.sql dest=/tmp/replication.sql
  # обязательно ресетим бинлог перед импортом, иначе выскочит ошибка
  - name:                 Create a new database
    mysql_db:             name=bet state=present
  - name:                 Reset master binlog
    shell:                /usr/bin/mysql -u root -e "RESET MASTER"
  - name:                 Restore database # команда не идемпотентна! нужны доп проверки
    mysql_db:             name=bet state=import target=/tmp/replication.sql
  # меняем мастера
  - name:                 Change master to master server
    mysql_replication:    mode=changemaster master_host='192.168.11.136' master_user='repl' master_password='!OtusLinux2020'
  # включаем репликацию
  - name:                 Start slave
    mysql_replication:    mode=startslave
  # посмотрим статус
  - name:                 Slave status
    mysql_replication:    mode=getslave
